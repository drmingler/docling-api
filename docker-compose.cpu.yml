services:
  celery_worker:
    build:
      context: .
      args:
        CPU_ONLY: "true"
    image: converter-cpu-image
    command: uv run celery -A worker.celery_config worker --pool=solo -n worker_primary --loglevel=info
    volumes:
      - ./worker:/app/worker
    environment:
      - REDIS_HOST=${REDIS_HOST}
      - ENV=production
    restart: on-failure
    healthcheck:
      test: [ "CMD", "uv", "run", "celery", "-A", "worker.celery_config", "inspect", "ping", "-d", "celery@worker_primary" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    depends_on:
      - redis

  app:
    container_name: marker-api-cpu
    build:
      context: .
      args:
        CPU_ONLY: "true"
      cache_from:
        - converter-cpu-image
    image: converter-cpu-image
    command: uv run uvicorn main:app --port 8080 --host 0.0.0.0 --workers 4 --proxy-headers
    environment:
      - REDIS_HOST=${REDIS_HOST}
      - ENV=production
      - MALLOC_ARENA_MAX=2
      - OMP_NUM_THREADS=2
      - PYTHONMALLOC=malloc
    ports:
      - "8080:8080"
    volumes:
      - ./main.py:/app/main.py
    restart: on-failure
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    depends_on:
      - redis

  redis:
    container_name: redis
    image: redis:7.2.4-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  flower:
    container_name: flower_cpu
    build:
      context: .
      args:
        CPU_ONLY: "true"
      cache_from:
        - converter-cpu-image
    image: converter-cpu-image
    command: uv run celery -A worker.celery_config flower --port=5555
    ports:
      - "5556:5555"
    volumes:
      - ./worker:/app/worker
    environment:
      - REDIS_HOST=${REDIS_HOST}
      - ENV=production
    depends_on:
      - app
      - redis
      - celery_worker

volumes:
  model_cache:
    name: docling_model_cache
